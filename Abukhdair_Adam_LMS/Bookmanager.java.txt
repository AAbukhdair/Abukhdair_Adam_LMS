{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\froman\fcharset0 TimesNewRomanPS-ItalicMT;\f2\froman\fcharset0 TimesNewRomanPS-BoldItalicMT;
\f3\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \AppleTypeServices\AppleTypeServicesF65539 \cf0 \expnd0\expndtw0\kerning0
import java.util.List;\uc0\u8232 import java.util.ArrayList;\u8232 import java.nio.file.Files;\u8232 import java.nio.file.Paths;\u8232 import java.io.IOException;\u8232 \u8232 
\f1\i \AppleTypeServices /**\uc0\u8232 \'a0* Manages a collection of books including operations to add, remove, and list books.\u8232 \'a0* Adam Abukhdair, CTSD Program, 2024-09-08\u8232 \'a0*/\u8232 
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 public class BookManager \{\uc0\u8232 \'a0\'a0\'a0 private List<Book> books = new ArrayList<>();\u8232 \u8232 \'a0\'a0\'a0 
\f1\i \AppleTypeServices /**\uc0\u8232 \'a0\'a0\'a0\'a0 * Adds a book to the collection.\u8232 \'a0\'a0\'a0\'a0 * 
\f2\b @param 
\f1\b0 book The book to add.\uc0\u8232 \'a0\'a0\'a0\'a0 */\u8232 \'a0\'a0\'a0 
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 public void addBook(Book book) \{\uc0\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 books.add(book);\u8232 \'a0\'a0\'a0 \}\u8232 \u8232 \'a0\'a0\'a0 
\f1\i \AppleTypeServices /**\uc0\u8232 \'a0\'a0\'a0\'a0 * Removes a book from the collection by ID.\u8232 \'a0\'a0\'a0\'a0 * 
\f2\b @param 
\f1\b0 id The ID of the book to remove.\uc0\u8232 \'a0\'a0\'a0\'a0 */\u8232 \'a0\'a0\'a0 
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 public void removeBook(String id) \{\uc0\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 books.removeIf(b -> b.getId().equals(id));\u8232 \'a0\'a0\'a0 \}\u8232 \u8232 \'a0\'a0\'a0 
\f1\i \AppleTypeServices /**\uc0\u8232 \'a0\'a0\'a0\'a0 * Lists all books in the collection.\u8232 \'a0\'a0\'a0\'a0 */\u8232 \'a0\'a0\'a0 
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 public void listBooks() \{\uc0\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 books.forEach(book -> System.
\f1\i \AppleTypeServices out
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 .println(book.getId() + " - " + book.getTitle() + " by " + book.getAuthor()));\uc0\u8232 \'a0\'a0\'a0 \}\u8232 \u8232 \'a0\'a0\'a0 
\f1\i \AppleTypeServices /**\uc0\u8232 \'a0\'a0\'a0\'a0 * Loads books from a specified file path into the collection.\u8232 \'a0\'a0\'a0\'a0 * 
\f2\b @param 
\f1\b0 filePath The path to the file containing book data.\uc0\u8232 \'a0\'a0\'a0\'a0 */\u8232 \'a0\'a0\'a0 
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 public void loadBooksFromFile(String filePath) \{\uc0\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 try \{\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 List<String> lines = Files.
\f1\i \AppleTypeServices readAllLines
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 (Paths.
\f1\i \AppleTypeServices get
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 (filePath));\uc0\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for (String line : lines) \{\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 String[] parts = line.split(",");\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if (parts.length == 3) \{\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 addBook(new Book(parts[0].trim(), parts[1].trim(), parts[2].trim()));\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \} catch (IOException e) \{\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 System.
\f1\i \AppleTypeServices err
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 .println("Failed to load books from file: " + e.getMessage());\uc0\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\u8232 \'a0\'a0\'a0 \}\u8232 \}
\f3 \AppleTypeServices \
}